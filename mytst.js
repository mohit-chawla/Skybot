var $q, A, NO_OF_CORES, arrayExcept, done, duration, entry, exit, flatten, idxs, j, job, k, l, m, max, permute, ps, ref, ref1, ref2, results, results1, results2, results3, spawn, start, stdout, timeElapsed,
  slice = [].slice;


timeElapsed = function(start, end) {
  var diff;
  diff = end - start;
  return (Math.floor(diff / 1000)) + "s " + (Math.floor(diff % 1000)) + "m";
};

arrayExcept = function(A, idx) {
  (A = A.slice(0)).splice(idx, 1);
  return A;
};

flatten = function(A) {
  var ref;
  return (ref = []).concat.apply(ref, [[]].concat(slice.call(A)));
};

permute = function(A, max) {
  if (max == null) {
    max = A.length;
  }
  if (A.length === 1) {
    return A;
  }
  return flatten(A.slice(0, +(max - 1) + 1 || 9e9).map(function(n, i) {
    var j, len, p, ref, results;
    ref = permute(arrayExcept(A, i));
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      results.push([n].concat(p));
    }
    console.log (results);
  }));
};

ref = process.argv.slice(2).map(function(a) {
  var i;
  if ((i = parseInt(a, 10))) {
    return i;
  } else {
    return a;
  }
}), job = ref[0], max = ref[1], entry = ref[2], exit = ref[3], stdout = ref[4];

if (stdout == null) {
  stdout = entry;
}

switch (job) {
  case 'worker':
    (ref1 = (A = (function() {
      results = [];
      for (var j = 1; 1 <= max ? j <= max : j >= max; 1 <= max ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this))).push.apply(ref1, A.splice(0, entry));
    ps = permute(A, exit - entry);
    if (stdout === 'print') {
      console.log(JSON.stringify(ps));
    } else {
      console.log(JSON.stringify(ps.length));
    }
    break;
  case 'parent':
    $q = require('q');
    spawn = (require('child_process')).spawn;
    NO_OF_CORES = Math.min((require('os')).cpus().length, max);
    idxs = (function() {
      results1 = [];
      for (var k = 0; 0 <= NO_OF_CORES ? k <= NO_OF_CORES : k >= NO_OF_CORES; 0 <= NO_OF_CORES ? k++ : k--){ results1.push(k); }
      return results1;
    }).apply(this).map(function(i) {
      return Math.floor(i * max / NO_OF_CORES);
    });
    start = Date.now();
    done = $q.all((function() {
      results2 = [];
      for (var l = 0, ref2 = NO_OF_CORES - 1; 0 <= ref2 ? l <= ref2 : l >= ref2; 0 <= ref2 ? l++ : l--){ results2.push(l); }
      return results2;
    }).apply(this).map(function(i) {
      var def, json, wrkr;
      wrkr = spawn('coffee', ['interleave.coffee', 'worker', max, idxs[i], idxs[i + 1], stdout], {
        encoding: 'utf8'
      });
      json = '';
      wrkr.stdout.setEncoding('utf8');
      wrkr.stdout.on('data', function(data) {
        return json += data;
      });
      wrkr.on('close', function(err) {
        console.log("Worker " + i + " has finished! [" + err + "]");
        return def.resolve(JSON.parse(json));
      });
      return (def = $q.defer()).promise;
    }));
    done.then(function(perms) {
      var duration;
      duration = timeElapsed(start, Date.now());
      if (stdout === 'print') {
        console.log(perms);
      }
      return console.log("\nDone!\nFound " + (perms.reduce((function(a, c) {
        return a + ((c != null ? c.length : void 0) || c);
      }), 0)) + " permutations!\nDuration: " + duration);
    });
    break;
  case 'simple':
    console.log("Permuting [1.." + max + "]...");
    start = Date.now();
    ps = permute((function() {
      results3 = [];
      for (var m = 1; 1 <= max ? m <= max : m >= max; 1 <= max ? m++ : m--){ results3.push(m); }
      return results3;
    }).apply(this));
    duration = timeElapsed(start, Date.now());
    if (stdout === 'print') {
      console.log(ps);
    }
    console.log("\nDone!\nFound " + ps.length + " permutations!\nDuration: " + duration);
}


// var arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
// permute(arr,null);

// ---
// generated by coffee-script 1.9.2